scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        import * as _           from ''lodash'';
        import * as backbone    from ''backbone'';
        import * as joint       from ''jointjs'';
        import { ElementRef }   from ''@angular/core'';
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	graph = new joint.dia.Graph;
        	paper : joint.dia.Paper
        	scale : number = 10
        	dragStartPosition = null;
        	verticalSpace = 140
        	horizontalSpace = 140
        	
        	strStep = ''com.twinsoft.convertigo.beans.steps.''
        	cdinalStepsList = [''IfThenElseStep'', ''ThenStep'', ''ElseStep'']
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        		/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	onGridSizeChanged() {
        	    this.paper.scale(this.scale / 10)
        	}
        
        	onMouseMove(event) {
        	    if (this.dragStartPosition != null) {
                    // this.c8o.log.debug("Mouse Move : " + JSON.stringify(this.dragStartPosition))
                    this.paper.translate(
                        event.offsetX - this.dragStartPosition.x, 
                        event.offsetY - this.dragStartPosition.y);
        	    }
            }
        
        	addLink(source, dest) {
        	    var link = new joint.shapes.standard.Link();
                link.source(source, {
                    anchor: {
                        name: ''bottom''
                    }
                })
                
                link.target(dest, {
                    anchor: {
                        name: ''top''
                    }
                })
                
                link.attr(''line/stroke'', ''white'');
                link.connector(''jumpover'', { size: 10 });	
                link.addTo(this.graph);
        	}
        	
        	addStep(position, size, text:string, hasChildren:boolean, qname: string, className: string, isStarting: boolean) {
        	    
        	    let childType = this.getChildType(className);
        	    let rect;
        	    
        	    // custom diamond shape for logical nodes 
        	    if(className.includes("If")) {
        	        rect = new joint.shapes.basic.Path({
        	            position: position,
        	            size: { width: 70, height: 70 },
        	            ports: {
        	                groups: {
        	                    ''source'': {
        	                        position: ''right'',
        	                        attrs: {
        	                            ''.joint-port-body'' : {
        	                                fill: ''orange'',
        	                                magnet: true
        	                            }
        	                        }
        	                    },
        	                    ''dest'': {
        	                        position: ''left'',
        	                        attrs: {
        	                            ''.joint-port-body'' : {
        	                                fill: ''green'',
        	                                magnet: true
        	                            }
        	                        }
        	                    }
        	                },
        	                items: [{
        	                    group: ''source'',
        	                    args: {}, // extra arguments for the port layout function, see `layout.Port` section
        	                },
        	                {
        	                    group: ''dest'',
        	                    args: {}, // extra arguments for the port layout function, see `layout.Port` section
        	                }]
        	            },
        	            attrs: {
        	                path: { 
        	                    d: ''M 30 0 L 60 30 30 60 0 30 z'', 
        	                    fill: ''blue'' 
        	                },
        	                ''text'': { 
        	                    text: text, 
        	                    fill: ''white'' 
        	               }
        	            },
        	            qname: qname,
        	            className: className,
        	            isStarting: isStarting
        	         })
        	    } else {
        	       
                rect = new joint.shapes.basic.Rect( {
                    markup: ''<g class="rotatable"><g class="scalable"><rect class="rect"/></g><image/><text/></g>'',
                    position: position,
                    size: size,
                    ports: {
                        groups: {
                            ''source'': {
                                position: ''right'',
                                attrs: {
                                    ''.joint-port-body'' : {
                                        fill: ''orange'',
                                        magnet: true
                                    }
                                }
                            },
                            ''dest'': {
                                position: ''left'',
                                attrs: {
                                    ''.joint-port-body'' : {
                                        fill: ''green'',
                                        magnet: true
                                    }
                                }
                            }
                        },
                        items: [{
                            group: ''source'',
                            args: {}, // extra arguments for the port layout function, see `layout.Port` section
                        },
                        {
                            group: ''dest'',
                            args: {}, // extra arguments for the port layout function, see `layout.Port` section
                        }]
                    },            
                    attrs: {
                        rect: {
                            fill: hasChildren ? ''#222222'' : ''blue'',
                            strokeDasharray: 2,
                            strokeWidth: 2,
                            stroke: hasChildren ? ''white'' : null 
                        },
                        text: {
                            text: text,
                            fill: ''white'',
                            ref:''rect'',
                            refY: ''.7''
                          },
        //                text:
        //                {
        //                    text: text,
        //                    fill: ''white''
        //                },
                        image: {
                            ''xlink:href'': this.c8o.endpoint + ''/.bin?__sequence=GetIcon&className='' + className + ''&large=true'',
                            width: 32,
                            height: 32,
                            ref: ''rect'',
                            refY: ''0.27'',
                            refX: ''0.27''
                        }
                    },
                    qname: qname,
                    className: className,
                    isStarting: isStarting
                });
        	    }
                
                rect.addTo(this.graph);
                return rect
        	}
        	
        	getAndDisplayStepChilds(cellView: joint.dia.CellView) {
        	    this.c8o.callJsonObject(".GetChildren", {
        	        qname: cellView.model.attributes["qname"]
        	    }).then((response, parameters) => {
        	        let previous = null;
        	        let y = 0;
        	        let x = 0;
        			let col = 1;
        	        
        			let parent = cellView
        	        let ancestor = parent.model.getAncestors()
        	        for (let i=0; i < response["array"].length; i++) {
        	            let element = response["array"][i]
        	            
        	            let stepClassName = element.className.substring(this.strStep.length)
        	            let parentClassName = parent.model.attributes[''className''].substring(this.strStep.length)
        //	            if(elementIndex == 1) {
        //	                let x = 500
        //	            } else {
        //	                let x = 250
        //	            }
        	            
        	            // calculate in case it is the first box we are opening
        	            if(i == 0) {
        	                if(previous == null && parentClassName == "IfThenElseStep" && stepClassName == "ThenStep") {
        	                    y = parent.model.attributes.position.y + this.verticalSpace
                                x = parent.model.attributes.position.x + this.horizontalSpace
        	                } else if (previous == null && parentClassName == "IfThenElseStep" && stepClassName == "ElseStep") {
        	                    y = parent.model.attributes.position.y + this.verticalSpace
                                x = parent.model.attributes.position.x
        	                } else if(previous == null && parentClassName == "ElseStep" || parentClassName == "ThenStep") {
                                y = parent.model.attributes.position.y + this.verticalSpace
                                x = parent.model.attributes.position.x
                            } else if(parentClassName == "SimpleIteratorStep") {
                                y = parent.model.attributes.position.y + this.verticalSpace
                                x = parent.model.attributes.position.x
                            } else if(parent.model.attributes[''isStarting''] == true){
                                y = parent.model.attributes.position.y + this.verticalSpace
                                x = parent.model.attributes.position.x + this.horizontalSpace
                            } else {
                                y = parent.model.attributes.position.y + this.verticalSpace
                                x = parent.model.attributes.position.x
                            }
        	            } else if(previous != null){
        	                // positioning Then box
        	                if(stepClassName == "ThenStep") {
        	                    y = parent.model.attributes.position.y
        	                    x = parent.model.attributes.position.x + this.horizontalSpace
        	                    
        	                // positioning Else box
        	                } else if (stepClassName == "ElseStep") {
        	                    y = parent.model.attributes.position.y + this.verticalSpace
        	                    x = parent.model.attributes.position.x
        	                    
        	                    // positioning Then''s or Else''s children compared to their parent 
        	                } else if (parentClassName == "ElseStep" || parentClassName == "ThenStep") {
        	                    y = parent.model.attributes.position.y + this.verticalSpace
        	                    x = parent.model.attributes.position.x
        	                } else {
        	                    y = previous.attributes.position.y + this.verticalSpace
        	                    x = previous.attributes.position.x
        	                }
        	            } else {
        	            }
        
        				// if a cell is already on points we move it vertically
                        if (this.graph.findModelsFromPoint({ x: x, y: y }).length > 0) {
                            let elementToMove = this.graph.findModelsFromPoint({ x: x, y: y })
                            elementToMove[0].set(''position'', {x: x, y: y + this.verticalSpace})
                        }
        
        				// if a box is opened and a new branch created, we move down vertically cells from the main branch
        				// condition checks if there is any cell on left of the current cell
                        if(this.graph.findModelsFromPoint({x: x - this.horizontalSpace, y: y }).length > 0){
        	
        					// if there is, incrementing col
        					col = col +1;
        					
        					// previous col
        					if(this.graph.findModelsFromPoint({x: x - (this.horizontalSpace * col), y: y})) {
        						// getting the element to move
        						let elementToMove = this.graph.findModelsFromPoint({ x: x - (this.horizontalSpace * col), y: y})
        						if(elementToMove.length > 0)
        							elementToMove[0].set(''position'', {x: x - (this.horizontalSpace * col), y: y + this.verticalSpace})
        					}
        					
        					// 2 col before 
        					if(this.graph.findModelsFromPoint({x: x - (this.horizontalSpace * (col + 1)), y: y})) {
        						// getting the element to move
        						let elementToMove = this.graph.findModelsFromPoint({ x: x - (this.horizontalSpace * (col + 1)), y: y})
        						if(elementToMove.length > 0)
        							elementToMove[0].set(''position'', {x: x - (this.horizontalSpace * (col + 1)), y: y + this.verticalSpace})
        					}
        					
        					
                            
                            // getting element to move
                            let elementToMove = this.graph.findModelsFromPoint({ x: x - this.horizontalSpace, y: y})
                            elementToMove[0].set(''position'', {x: x - this.horizontalSpace, y: y + this.verticalSpace })
                            
                            // getting its successors
                            let successors = this.graph.getSuccessors(elementToMove[0]);
                            
                            for(var j = 0; j < successors.length; j++) {
                                // if it''s the first successor no need to move it more than the vertical space
                                if(j == 0) {
                                    successors[j].set(''position'', {x: successors[j].attributes.position.x, y : elementToMove[0].attributes.position.y + this.verticalSpace})
                                } else {
                                    successors[j].set(''position'', {x: successors[j].attributes.position.x, y : elementToMove[0].attributes.position.y + this.verticalSpace * (j +1)})
                                }
                                
                            }
                        }
        	            
        	            
        	            let step = this.addStep({
        //                        x: cellView.getBBox().topLeft().x + x,
        //                        y: cellView.getBBox().topLeft().y      
        	                      x: x,
        	                      y: y
                            }, 
                            {
                                width: 70,
                                height: 70              
                            }, 
                            element.displayName,
                            element.hasChildren,
                            element.qname,
                            element.className,
                            false
                        )
                        
                        // cellView.model.embed(step)
                        
                        if(i == 0)
                            this.addLink(cellView.model, step)
                        
                        if (previous != null && stepClassName != "ElseStep") 
                            this.addLink(previous, step)
                            
                        if (stepClassName == "ElseStep")
                            this.addLink(cellView.model, step)
                        
                        previous = step
                        
                        
        
                        /*
                        if (element.hasChildren) {
                            this.getAndDisplayStepChilds(step.findView(this.paper)) 
                        }
                        */
        	        }
        	        
        //	        /**
        //	         * Get the top most ancestor and ask it to resize itslef to fit all embeds 
        //	         */
        //            let ancestors = cellView.model["getAncestors"]()
        //            let resizeToFit = (ancestors.length == 0 ? cellView.model: ancestors[ancestors.length-1]) as joint.shapes.basic.Rect
        //            
        //            /**
        //             * Get the the bottom left position before resize
        //             */
        //            let bottomY = resizeToFit.getBBox().bottomLeft().y
        //            let bottomX = resizeToFit.getBBox().bottomLeft().x
        //
        //            /* Now Resize to fit all embedded */
        //            resizeToFit["fitEmbeds"]({
        //                deep: true,
        //                padding: 20
        //            })
        //            
        //            /* get the new bottom left position of the resized box, and compute deltas */ 
        //            let deltaY = resizeToFit.getBBox().bottomLeft().y - bottomY
        //            let deltaX = resizeToFit.getBBox().bottomLeft().x - bottomX
        //            
        //            /* Reposition resized Box by deltaX on the right */
        //            resizeToFit.translate(-deltaX, 0)
        //
        //            /* Now, walk all boxes and find only the ones that are lower than the non resized box and push them down by deltaY */ 
        //            for (let element of this.paper.model.getElements()) {
        //                if (element instanceof joint.shapes.basic.Rect) {
        //                    /* Only for non embedded boxes */ 
        //                    if (element.getParentCell() != resizeToFit)
        //                        if (element.getBBox().topLeft().y > bottomY)
        //                            element.translate(0, deltaY)
        //                }
        //            }
                    return null;
        	    })
        .fail((error:any)=>{
        	console.log(error);
        })
        	}
        	
        	getChildType(className: string) {
        	    if(className.includes(''variables'')) {
        	        return ''variables'';
        	    } else if (className.includes(''steps'')) {
        	        return ''steps'';
        	    } else {
        	        return '''';
        	    }
        	}
        	
        	ngAfterViewInit() {
        	    /**
        	     * TODO : Implement Drag & Drop from palette see : https://codepen.io/fxaeberard/pen/reGvjm
        	     * 
        	     */    
        	    let element = this.flowID as ElementRef
                this.paper = new joint.dia.Paper({
                    el: element.nativeElement,
                    width: ''100%'',
                    height: ''100%'',
                    model: this.graph,
                    gridSize: 1,
                        defaultLink: new joint.dia.Link({
                        attrs: {
                            ''.connection'' : {
                                stroke: ''orange'',
                                strokeWidth: 2
                            }
                        }                
                    }),
                    defaultRouter: {
                        name: ''manhattan''
                    },
                    defaultConnector: {
                        name: ''rounded''
                    },
                    validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {
                        // Prevent connections if not on Magnets from ports
                        if (magnetT == undefined|| magnetS ==undefined)
                            return false
                        else
                            return true
                    }
                });
        	    
                this.paper.on(''blank:pointerdown'', (event, x, y) => {
                    this.c8o.log.debug("Mouse Start")
                    this.dragStartPosition = { x: x * this.scale / 10, y: y * this.scale / 10};
                });
                
                this.paper.on(''cell:pointerup blank:pointerup'', (cellView, x, y) => {
                    this.c8o.log.debug("Mouse Up")
                    this.dragStartPosition = null
                });
                
                this.paper.on(''cell:pointerclick'',  (cellView) => {
                    this.c8o.log.debug("Step clicked !!!")
        //            cellView.model.attributes.attrs[''.label''].refY = -80
        //            let parents = cellView.model.getAncestors();
        //            
        //            this.c8o.log.debug("I AM LENGTH : " + parents.length)
        //            if(parents.length !== 0) {
        //                for(let i = 0; i < parents.length ; i++) {
        //                    let id = parents[i].id;
        //                    let cell = this.graph.getCell(id);
        //                    cell.attributes.attrs[''.label''].refY = -80 * (i + 1.5);
        //                }
        //            }
                    this.getAndDisplayStepChilds(cellView)
                })
                
        	}
        	/*End_c8o_PageFunction*/
        '
segment: path-to-flowviewer
title: Title for FlowViewer
↓PageEvent [ngx.components.UIPageEvent-1588052803545]: 
  ↓useJointJS [ngx.components.UICustomAction-1588052817033]: 
    package_dependencies: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: jointjs
              - java.lang.String: 
                - ↑value: 3.1.1
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@types/lodash'
              - java.lang.String: 
                - ↑value: 3.10.1
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@types/jquery'
              - java.lang.String: 
                - ↑value: '>=3.4.1'
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: '@types/backbone'
              - java.lang.String: 
                - ↑value: 1.4.1
↓Subscribe_Handler [ngx.components.UIEventSubscriber-1588686865663]: 
  topic: dboFocus
  ↓CallSequence [ngx.components.UIDynamicAction-1588686924736]: 
    beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:C8oStudio.GetChildren"}'
    ↓DisplayFlow [ngx.components.UICustomAction-1588687209815]: 
      actionValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '            class walkTree {
                              
                          }
              		    
                  		this.graph.clear();
                  		let previous = null
                  		for (var i=0; i < vars.flow.length ; i++) {
                  		    let step = this.addStep({
                      		        x: 30,
                      		        y: 30 + this.verticalSpace * i		        
                      		    }, 
                      		    {
                                      width: 70,
                                      height: 70              
                                  }, 
                                  vars.flow[i].displayName,
                                  vars.flow[i].hasChildren,
                                  vars.flow[i].qname,
                                  vars.flow[i].className,
              					true
                  		    )
                  		    
                  		    if (previous != null)
                  		        this.addLink(previous, step)
                  		    previous = step
                  		}
                  		resolve();
              '
      ↓flow [ngx.components.UIControlVariable-1588693303067]: 
        varValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: source:{"filter":"Sequence","project":"C8oStudio","input":"listen(['C8oStudio.GetChildren'])?.array"}
    ↓qname [ngx.components.UIControlVariable-1589811848532]: 
      comment: new variable
      varValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: script:out
↓Grid [ngx.components.UIDynamicElement-1588228737881]: 
  beanData: '{"ionBean":"Grid","Height":"plain:height:100%"}'
  tagName: ion-grid
  ↓GridRow [ngx.components.UIDynamicElement-1588228741415]: 
    beanData: '{"ionBean":"GridRow","Height":"plain:1200px"}'
    tagName: ion-row
    ↓GridCol [ngx.components.UIDynamicElement-1588228746957]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
      ↓Div [ngx.components.UIDynamicElement-1588137806849]: 
        beanData: '{"ionBean":"DivTag"}'
        identifier: flowID
        tagName: div
        ↓Attr [ngx.components.UIAttribute-1588238054179]: 
          attrName: (document:mousemove)
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:onMouseMove($event)
  ↓GridRow1 [ngx.components.UIDynamicElement-1588228813856]: 
    beanData: '{"ionBean":"GridRow","Height":"plain:height:50px"}'
    tagName: ion-row
    ↓GridCol [ngx.components.UIDynamicElement-1588228819248]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
      ↓RangeSlider [ngx.components.UIDynamicElement-1588159080969]: 
        beanData: |
          '{
           "ionBean": "Range",
           "Min": "plain:1",
           "Max": "plain:10",
           "Snaps": "plain:true"
          }'
        tagName: ion-range
        ↓Attr [ngx.components.UIAttribute-1588159106785]: 
          attrName: '[(ngModel)]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:scale
        ↓Attr1 [ngx.components.UIAttribute-1588159608396]: 
          attrName: (ngModelChange)
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:onGridSizeChanged()