↓Element [steps.XMLElementStep-1596803262010]: 
  nodeName: lines
  ↓type [steps.XMLAttributeStep-1596803268993]: 
    nodeName: type
    nodeText: array
↓GetLog [steps.SimpleStep-1596788734113]: 
  expression: |
    'var logmanager = context.get("logmanager");
    if (logmanager == null) {
    	context.set("logmanager", logmanager = com.twinsoft.convertigo.engine.admin.logmanager.LogManager());
    	logmanager.setContinue(true);
    	logmanager.setDateStart(new java.util.Date(java.lang.System.currentTimeMillis()));
    }
    
    var logs = logmanager.waitForLines(10000);
    
    var DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss,S");
    var lastLogTime = context.get("lastLogTime");
    if (!lastLogTime) {
    	lastLogTime = new Date().getTime();
    }
    
    var lines = dom.getDocumentElement().getElementsByTagName("lines").item(0);
    for (i = 0; i < logs.length(); i++) {
      var logLine = logs.get(i);
      var len = logLine.length();
      var dateTime = logLine.getString(1);
      var dateTimeParts = dateTime.split(" ");
      var date = dateTimeParts[0];
      var time = dateTimeParts[1];
      var deltaTime;
      try {
        var currentDate = DATE_FORMAT.parse(dateTime).getTime();
          if (lastLogTime < 0) {
             deltaTime = "--";
    		} else {
    			var delta = currentDate - lastLogTime;
    			lastLogTime = currentDate;
    			if (delta < 1000) {
    				deltaTime = org.apache.commons.lang3.StringUtils.leftPad(delta + " ms", 8);
    			}
    			else if (delta < 10000) {
    				deltaTime = org.apache.commons.lang3.StringUtils.leftPad(java.lang.Math.floor(delta / 10.0) / 100.0 + " s ", 8);
    			}
    			else {
    				deltaTime = org.apache.commons.lang3.StringUtils.leftPad(java.lang.Math.floor(delta / 1000.0) + " s ", 8);
    			}
    		}
    		lastLogTime = currentDate;
    		context.set("lastLogTime", lastLogTime);
    	} catch (e) {
    		log.warn("catch " + e);
    		deltaTime = "n/a";
    	}
    	
    
    	// Build the message lines
    //	var message = logLine.getString(4);
    //	var messageLines = message.split("\n");
    //	if (messageLines.length > 1) {
    //		var firstLine = true;
    //		for (j = 0; j < messageLines.length(); j++) {
    //			var messageLine = messageLines[j];
    //			var line = dom.createElement("line");
    //			line.setAttribute("type", "object");
    //			lines.appendChild(line);
    //			var elt = dom.createElement("category");
    //			elt.setTextContent(logLine.getString(0));
    //			line.appendChild(elt);
    //			logLines.add(new LogLine(logLine.getString(0), date, time, deltaTime, logLine
    //					.getString(2), logLine.getString(3), messageLine, !firstLine, counter,
    //					message, allExtras));
    //			counter++;
    //			firstLine = false;
    
    //			charMeter += messageLine.length();
    //		}
    //	}
    //	else {
    		var line = dom.createElement("line");
    		line.setAttribute("type", "object");
    		lines.appendChild(line);
    		var elt = dom.createElement("category");
    		elt.setTextContent(logLine.getString(0));
    		line.appendChild(elt);
    		elt = dom.createElement("date");
    		elt.setTextContent(date);
    		line.appendChild(elt);
    		elt = dom.createElement("time");
    		elt.setTextContent(time);
    		line.appendChild(elt);
    		elt = dom.createElement("deltaTime");
    		elt.setTextContent(deltaTime);
    		line.appendChild(elt);
    		elt = dom.createElement("level");
    		elt.setTextContent(logLine.getString(2));
    		line.appendChild(elt);
    		elt = dom.createElement("thread");
    		elt.setTextContent(logLine.getString(3));
    		line.appendChild(elt);
    		elt = dom.createElement("message");
    		elt.setTextContent(logLine.getString(4));
    		line.appendChild(elt);
    	for (j = 5; j < len; j++) {
    		var extra = logLine.getString(j);
    		var k = extra.indexOf("=");
    		elt = dom.createElement(extra.substring(0, k));
    		elt.setTextContent(extra.substring(k + 1));
    		line.appendChild(elt);
    	}
    //		logLines.add(new LogLine(logLine.getString(0), date, time, deltaTime, logLine
    //				.getString(2), logLine.getString(3), message, false, counter,
    //				message, allExtras));
    //		counter++;
    //		
    //		charMeter += message.length();
    //	}
    	
    //	var len = logLine.length();
    //	for (j = 5; j < len; j++) {
    //		var extra = logLine.getString(j);
    //		var k = extra.indexOf("=");
    //		allExtras.put(extra.substring(0, k), extra.substring(k + 1));
    //	}
    }
    //        Appender appender = (Appender) session.getAttribute(attr_appender + ServiceUtils.getAdminInstance(request));
    //        if (appender == null) {
    //        	appender = new AppenderSkeleton() {
    //
    //            	@Override
    //            	protected void append(LoggingEvent arg0) {
    //            		synchronized (this) {
    //						this.notifyAll();
    //					}
    //            	}
    //
    //    			public void close() {
    //    			}
    //
    //    			public boolean requiresLayout() {
    //    				return false;
    //    			}
    //            };
    //            session.setAttribute(attr_appender + ServiceUtils.getAdminInstance(request), appender);
    //        } else {
    //        	synchronized (appender) {
    //        		appender.notifyAll();
    //        	}
    //        }
    //        try {
    //	        Engine.logConvertigo.addAppender(appender);
    //	        
    //	        boolean interrupted = false;
    //	        JSONArray lines = logmanager.getLines();
    //	        while (lines.length() == 0 && !interrupted && session.getAttribute(attr_start) == start) {
    //	        	synchronized (appender) {
    //					try {
    //						appender.wait(2000);
    //					} catch (InterruptedException e) {
    //						interrupted = true;
    //					}
    //				}
    //	        	lines = logmanager.getLines();
    //	        }
    //	        response.put("lines", lines);
    //        } finally {
    //        	if (appender != null) {
    //        		Engine.logConvertigo.removeAppender(appender);
    //        	}
    //        }
    //}'